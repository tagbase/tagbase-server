# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tagbase_server.models.base_model_ import Model
from tagbase_server.models.events200_events_inner import Events200EventsInner
from tagbase_server import util

from tagbase_server.models.events200_events_inner import (
    Events200EventsInner,
)  # noqa: E501


class Events200(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count=None, events=None):  # noqa: E501
        """Events200 - a model defined in OpenAPI

        :param count: The count of this Events200.  # noqa: E501
        :type count: int
        :param events: The events of this Events200.  # noqa: E501
        :type events: List[Events200EventsInner]
        """
        self.openapi_types = {"count": int, "events": List[Events200EventsInner]}

        self.attribute_map = {"count": "count", "events": "events"}

        self._count = count
        self._events = events

    @classmethod
    def from_dict(cls, dikt) -> "Events200":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The events200 of this Events200.  # noqa: E501
        :rtype: Events200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Events200.

        Total count of unique events  # noqa: E501

        :return: The count of this Events200.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Events200.

        Total count of unique events  # noqa: E501

        :param count: The count of this Events200.
        :type count: int
        """

        self._count = count

    @property
    def events(self):
        """Gets the events of this Events200.

        List of event UUID's and associated tag and submission IDs  # noqa: E501

        :return: The events of this Events200.
        :rtype: List[Events200EventsInner]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Events200.

        List of event UUID's and associated tag and submission IDs  # noqa: E501

        :param events: The events of this Events200.
        :type events: List[Events200EventsInner]
        """

        self._events = events
