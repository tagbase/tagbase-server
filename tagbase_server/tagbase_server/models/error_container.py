# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tagbase_server.models.base_model_ import Model
from tagbase_server.models.error import Error
from tagbase_server import util

from tagbase_server.models.error import Error  # noqa: E501


class ErrorContainer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors=None, trace=None):  # noqa: E501
        """ErrorContainer - a model defined in OpenAPI

        :param errors: The errors of this ErrorContainer.  # noqa: E501
        :type errors: List[Error]
        :param trace: The trace of this ErrorContainer.  # noqa: E501
        :type trace: str
        """
        self.openapi_types = {"errors": List[Error], "trace": str}

        self.attribute_map = {"errors": "errors", "trace": "trace"}

        self._errors = errors
        self._trace = trace

    @classmethod
    def from_dict(cls, dikt) -> "ErrorContainer":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ErrorContainer of this ErrorContainer.  # noqa: E501
        :rtype: ErrorContainer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this ErrorContainer.

        The array of error entries associated with the error response  # noqa: E501

        :return: The errors of this ErrorContainer.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ErrorContainer.

        The array of error entries associated with the error response  # noqa: E501

        :param errors: The errors of this ErrorContainer.
        :type errors: List[Error]
        """
        if errors is not None and len(errors) > 100:
            raise ValueError(
                "Invalid value for `errors`, number of items must be less than or equal to `100`"
            )  # noqa: E501
        if errors is not None and len(errors) < 0:
            raise ValueError(
                "Invalid value for `errors`, number of items must be greater than or equal to `0`"
            )  # noqa: E501

        self._errors = errors

    @property
    def trace(self):
        """Gets the trace of this ErrorContainer.

        The error trace information.  # noqa: E501

        :return: The trace of this ErrorContainer.
        :rtype: str
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this ErrorContainer.

        The error trace information.  # noqa: E501

        :param trace: The trace of this ErrorContainer.
        :type trace: str
        """

        self._trace = trace
