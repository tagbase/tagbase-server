# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tagbase_server.models.base_model_ import Model
from tagbase_server.models.tag_submission import TagSubmission
from tagbase_server import util

from tagbase_server.models.tag_submission import TagSubmission  # noqa: E501


class Tag200(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tag=None):  # noqa: E501
        """Tag200 - a model defined in OpenAPI

        :param tag: The tag of this Tag200.  # noqa: E501
        :type tag: List[TagSubmission]
        """
        self.openapi_types = {"tag": List[TagSubmission]}

        self.attribute_map = {"tag": "tag"}

        self._tag = tag

    @classmethod
    def from_dict(cls, dikt) -> "Tag200":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tag200 of this Tag200.  # noqa: E501
        :rtype: Tag200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tag(self):
        """Gets the tag of this Tag200.

        List containing one or more submissions for a given tag  # noqa: E501

        :return: The tag of this Tag200.
        :rtype: List[TagSubmission]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Tag200.

        List containing one or more submissions for a given tag  # noqa: E501

        :param tag: The tag of this Tag200.
        :type tag: List[TagSubmission]
        """
        if tag is not None and len(tag) > 100:
            raise ValueError(
                "Invalid value for `tag`, number of items must be less than or equal to `100`"
            )  # noqa: E501
        if tag is not None and len(tag) < 1:
            raise ValueError(
                "Invalid value for `tag`, number of items must be greater than or equal to `1`"
            )  # noqa: E501

        self._tag = tag
