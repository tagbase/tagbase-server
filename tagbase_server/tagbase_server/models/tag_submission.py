# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from tagbase_server.models.base_model_ import Model
from tagbase_server import util


class TagSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self,
        dataset_id=None,
        date_time=None,
        filename=None,
        hash_sha256=None,
        metadata=None,
        notes=None,
        submission_id=None,
        tag_id=None,
        version=None,
    ):  # noqa: E501
        """TagSubmission - a model defined in OpenAPI

        :param dataset_id: The dataset_id of this TagSubmission.  # noqa: E501
        :type dataset_id: int
        :param date_time: The date_time of this TagSubmission.  # noqa: E501
        :type date_time: str
        :param filename: The filename of this TagSubmission.  # noqa: E501
        :type filename: str
        :param hash_sha256: The hash_sha256 of this TagSubmission.  # noqa: E501
        :type hash_sha256: str
        :param metadata: The metadata of this TagSubmission.  # noqa: E501
        :type metadata: Dict[str, str]
        :param notes: The notes of this TagSubmission.  # noqa: E501
        :type notes: str
        :param submission_id: The submission_id of this TagSubmission.  # noqa: E501
        :type submission_id: int
        :param tag_id: The tag_id of this TagSubmission.  # noqa: E501
        :type tag_id: int
        :param version: The version of this TagSubmission.  # noqa: E501
        :type version: str
        """
        self.openapi_types = {
            "dataset_id": int,
            "date_time": str,
            "filename": str,
            "hash_sha256": str,
            "metadata": Dict[str, str],
            "notes": str,
            "submission_id": int,
            "tag_id": int,
            "version": str,
        }

        self.attribute_map = {
            "dataset_id": "dataset_id",
            "date_time": "date_time",
            "filename": "filename",
            "hash_sha256": "hash_sha256",
            "metadata": "metadata",
            "notes": "notes",
            "submission_id": "submission_id",
            "tag_id": "tag_id",
            "version": "version",
        }

        self._dataset_id = dataset_id
        self._date_time = date_time
        self._filename = filename
        self._hash_sha256 = hash_sha256
        self._metadata = metadata
        self._notes = notes
        self._submission_id = submission_id
        self._tag_id = tag_id
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> "TagSubmission":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TagSubmission of this TagSubmission.  # noqa: E501
        :rtype: TagSubmission
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_id(self):
        """Gets the dataset_id of this TagSubmission.

        The primary key from the Dataset relation  # noqa: E501

        :return: The dataset_id of this TagSubmission.
        :rtype: int
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this TagSubmission.

        The primary key from the Dataset relation  # noqa: E501

        :param dataset_id: The dataset_id of this TagSubmission.
        :type dataset_id: int
        """

        self._dataset_id = dataset_id

    @property
    def date_time(self):
        """Gets the date_time of this TagSubmission.

        Local datetime stamp at the time of eTUFF tag data file ingestion  # noqa: E501

        :return: The date_time of this TagSubmission.
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this TagSubmission.

        Local datetime stamp at the time of eTUFF tag data file ingestion  # noqa: E501

        :param date_time: The date_time of this TagSubmission.
        :type date_time: str
        """

        self._date_time = date_time

    @property
    def filename(self):
        """Gets the filename of this TagSubmission.

        Full name and extension of the ingested eTUFF tag data file  # noqa: E501

        :return: The filename of this TagSubmission.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this TagSubmission.

        Full name and extension of the ingested eTUFF tag data file  # noqa: E501

        :param filename: The filename of this TagSubmission.
        :type filename: str
        """

        self._filename = filename

    @property
    def hash_sha256(self):
        """Gets the hash_sha256 of this TagSubmission.

        SHA256 hash representing the contents of the submission eTUFF file  # noqa: E501

        :return: The hash_sha256 of this TagSubmission.
        :rtype: str
        """
        return self._hash_sha256

    @hash_sha256.setter
    def hash_sha256(self, hash_sha256):
        """Sets the hash_sha256 of this TagSubmission.

        SHA256 hash representing the contents of the submission eTUFF file  # noqa: E501

        :param hash_sha256: The hash_sha256 of this TagSubmission.
        :type hash_sha256: str
        """

        self._hash_sha256 = hash_sha256

    @property
    def metadata(self):
        """Gets the metadata of this TagSubmission.

        Contains the ingested tag metadata consistent with the eTUFF specification  # noqa: E501

        :return: The metadata of this TagSubmission.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TagSubmission.

        Contains the ingested tag metadata consistent with the eTUFF specification  # noqa: E501

        :param metadata: The metadata of this TagSubmission.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def notes(self):
        """Gets the notes of this TagSubmission.

        Free-form text field where details of submitted eTUFF file for ingest can be provided e.g. submitter name, etuff data contents (tag metadata and measurements + primary position data, or just secondary solutionpositional meta/data)  # noqa: E501

        :return: The notes of this TagSubmission.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this TagSubmission.

        Free-form text field where details of submitted eTUFF file for ingest can be provided e.g. submitter name, etuff data contents (tag metadata and measurements + primary position data, or just secondary solutionpositional meta/data)  # noqa: E501

        :param notes: The notes of this TagSubmission.
        :type notes: str
        """

        self._notes = notes

    @property
    def submission_id(self):
        """Gets the submission_id of this TagSubmission.

        Unique numeric ID assigned upon submission of a tag eTUFF data file for ingest/importation into Tagbase  # noqa: E501

        :return: The submission_id of this TagSubmission.
        :rtype: int
        """
        return self._submission_id

    @submission_id.setter
    def submission_id(self, submission_id):
        """Sets the submission_id of this TagSubmission.

        Unique numeric ID assigned upon submission of a tag eTUFF data file for ingest/importation into Tagbase  # noqa: E501

        :param submission_id: The submission_id of this TagSubmission.
        :type submission_id: int
        """

        self._submission_id = submission_id

    @property
    def tag_id(self):
        """Gets the tag_id of this TagSubmission.

        Unique numeric Tag ID associated with the ingested tag eTUFF data file  # noqa: E501

        :return: The tag_id of this TagSubmission.
        :rtype: int
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """Sets the tag_id of this TagSubmission.

        Unique numeric Tag ID associated with the ingested tag eTUFF data file  # noqa: E501

        :param tag_id: The tag_id of this TagSubmission.
        :type tag_id: int
        """

        self._tag_id = tag_id

    @property
    def version(self):
        """Gets the version of this TagSubmission.

        Version identifier for the eTUFF tag data file ingested  # noqa: E501

        :return: The version of this TagSubmission.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TagSubmission.

        Version identifier for the eTUFF tag data file ingested  # noqa: E501

        :param version: The version of this TagSubmission.
        :type version: str
        """

        self._version = version
